package io.github.aciccarello.problems.euler;

import java.util.ArrayList;
import java.util.List;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 * @see https://projecteuler.net/problem=2
 */
public class Problem2 implements EulerSolver {
    public String description = "Even Fibonacci Numbers";
    public int number = 2;

    @Override
    public Integer call() throws Exception {
        return sumEvenNumbers(fibonacci(4_000_000));
    }

    protected static List<Integer> fibonacci(int max) {
        List<Integer> numbers = new ArrayList<>();

        int current = 1;
        int previous = 1;

        while (current <= max) {
            numbers.add(current);
            int next = current + previous;
            previous = current;
            current = next;
        }

        return numbers;
    }

    protected static int sumEvenNumbers(List<Integer> list) {
        return list.stream().reduce(0, (a, b) -> {
            if (b % 2 == 0) {
                return a + b;
            } else {
                return a;
            }
        });
    }
}
